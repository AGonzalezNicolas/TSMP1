#!/bin/csh
#
#-----------------------------------------------------------------------------
#
# Generic build script for coupled model simulations using OASIS3 communicator
# TerrSysMPV2.0
# Author: Prabhakar Shrestha
#
# Clonning from MIUB git main dev. repo: 2013-05-16_10:00:00
# Edits: Klaus G"ORGEN (KGo) 
#        Fabian Gasper (FGa)
# Current version with edits: v2013-07-11_00_KGo_FGa
#
# Usage:
# ./build_oas3
# ./build_oas3 >& build_oas3.log_$(date +%Y%m%d%H%M%S) &
#
#*****************************************************************************
#                       USER SETTINGS                                        *
#                                                                            *
#*****************************************************************************
#
# 1) COMPILER SETTINGS
#
# Option for sva_compiler: Intel / Gnu / Ibm
setenv sva_compiler Ibm
# Option for sva job scheduler: pbs / lls
setenv job_scheduler lls
setenv LDSEQ_COS gfortran
setenv MPIDIR /homea/slts/slts06/local/juqueen/mpi
setenv LIBGRIB1_COS /homea/slts/slts06/local/juqueen/grib1
setenv NETCDF /homea/slts/slts06/local/juqueen/netcdf
setenv HYPRE_DIR /homea/slts/slts06/local/juqueen/hypre
setenv SILO_DIR /homea/slts/slts06/local/juqueen/silo
setenv TCL_DIR /homea/slts/slts06/local/juqueen/tcl
setenv SVAROOT $HOME/coup_oas
setenv nppn 16

setenv PARFLOW_DIR $SVAROOT/parflow
setenv LIBDWD_FORCE_CONTROLWORDS 1
setenv LIBDWD_BITMAP_TYPE ASCII
#
set rID = "_TEST2" #run ID to identify different runs, e.g. parameter sweeps - not jet implemented, add data
# 1.5) DIR SETTINGS
# not changed anymore, i.e. different runs may use the same forcing data directory
set forcingdir = /work/slts/slts00/tsmp/TerrSysMPdb/testdata_NRW_std 
set rundir = $WORK/tsmp/TerrSysMP$rID/run
set storagedir = $WORK/tsmp/TerrSysMP$rID/output
set archivedir = "" #$WORK/TerrSysMP_t3_2/run #"" #$WORK/TerrSysMP_t3/run #KGo of the previous run, if a new run is started the *current* directory is moved over, this is fairly dirty and only for KGo testing
set compile_option = 5
set compile_clean = 1
set profiling = 0
set compiler_optimization = 1
#
# Define compiler optimization flags
if($compiler_optimization == 1) then
 	setenv OPT_C "-O2 -qhot -qarch=qp -qtune=qp"
else
 	setenv OPT_C ""
endif
#
# Define prfiling-tool for linking and running in jobscript + envs
if($profiling == 1) then
  	#profiling with scalasca - don't forget to:  module load UNITE scalasca  on your system
 	setenv PREP_C "scalasca -instrument"
 	set prep_runjob = "scalasca -analyze"
 	set flags_runjob = "--envs ESD_BUFFER_SIZE=300000 --envs LOGNAME='$LOGNAME'" # not sure if working on PBS
else
	setenv PREP_C  ""
 	set prep_runjob = ""
 	set flags_runjob = "--envs LOGNAME='$LOGNAME'"
endif
#
#
#
# 2) MODEL SETTINGS
# if the model is not used, set the number of CPUs in any direction to 0, this is needed in the context
# of the mapfile generation on BG/Q
#
# Initialization Date and runhours(hrs) 
# change runhours from float "3." to integer, needed for the date functionality
# data for up to 24 hours
set yyyy = 2008
set mm   = 05
set dd   = 08
set hh   = 00
set runhours = 3 
# COSMO grid and time-stepping(sec)
# use 8x8 for test: one nodeboard on JUQUEEN
set nprocx_cos = 19
set nprocy_cos = 19 
set ngcosx = 150 
set ngcosy = 150 
set dt_cos = 10 
# CLM grid and time-stepping(sec)
set nprocx_clm = 64 
set nprocy_clm = 1 
set ngclmx = 90000 
set ngclmy = 1
set dt_clm = 900
set clmforcinggridsize = "0300x0300"
set clm_data = $forcingdir/clm3.5/Rur_NRW
# ParFlow grid and time-stepping(hour)
# use 5x5 for test: one bodeboard on JUQUEEN
set nprocx_pfl = 8
set nprocy_pfl = 8
set ngpflx = 300 
set ngpfly = 300 
set dt_pfl = 0.25
# OASIS coupling frequency(sec) : cplfreq > MIN(dt_cos, dt_clm, dt_pfl)
set cplfreq1=900
set cplfreq2=900

set wallclock_time="00:30:00" #KGo

#*****************************************************************************
#                       END USER SETTINGS                                    *
#                                                                            *
#*****************************************************************************
#
# before the work dir is recreated / pupulated, we need to save the results from the 


#-----------------------------------------------------------------------------
# Here we do sequential building of the executables, needs to be optimized later
# for any redundancy
#
clear
echo "SVA Configuration: TR32/Z4"
echo " 0 Only COSMO"
echo " 1 Only CLM"
echo " 2 Only ParFlow"
echo " 3 COSMO + CLM"
echo " 4 CLM + ParFlow"
echo " 5 COSMO + CLM + ParFlow"
echo "  "
# User Input Start
# echo -n "Enter your selection [0-5]: "
# set compile_option = $<                     
 echo "compile_option = " $compile_option 
# echo " "
#
set compile_oas = 0 ; set compile_cos = 0 ; set compile_clm = 0 ; set compile_pfl = 0 
#
if ($compile_option == 0) then
set compile_cos = 1;
else if ($compile_option == 1) then
set compile_clm = 1
else if ($compile_option == 2) then
set compile_pfl = 1
else if ($compile_option == 3) then
set compile_oas = 1 ;set compile_cos = 1 ; set compile_clm = 1
else if ($compile_option == 4) then
set compile_oas = 1 ;set compile_clm = 1 ; set compile_pfl = 1
else if ($compile_option == 5) then
set compile_oas = 1 ; set compile_cos = 1 ; set compile_clm = 1 ; set compile_pfl = 1
else
 echo "Error: Compilation Option [ 0 1 2 3 4 5]"
 exit 
endif
# User Input
# echo ""
# echo -n "Clean Compile (0/1) :"
# set compile_clean = $<
# with a restart, we usually need a preservation of the settings and executables, hence no clean compile
# echo " "
 echo "compile_clean = " $compile_clean
if ($compile_clean == 0) then
echo "Recreating the executables using old configuration"
echo " "
else if ($compile_clean == 1) then  
echo "Creating new executables....."
echo " "
else
 echo "Error: 1 or 0"
 exit
endif
#
if ($compile_oas == 1) then
set nproc_oas = 1
else
set nproc_oas = 0
endif
set compile_dum = 0 

#-----------------------------------------------------------------------------
# Step 1a:  Create the rundir, where the executables will be stored 
#-----------------------------------------------------------------------------
#set rundir          = $WORK/TerrSysMPcurrent/run
if ( "x$archivedir" == "x" ) then
 echo "no archiving"
else
 echo "archiving..."
 echo "from" $rundir
 echo "to" $archivedir
 mkdir -p $archivedir 
 mv -f $rundir/* $archivedir/.
endif
rm -rf $rundir
mkdir -p $rundir
mkdir -p $storagedir
#-----------------------------------------------------------------------------
# Step 1b:  Compilers and OASIS3 flags 
#-----------------------------------------------------------------------------
if ($job_scheduler == pbs) set MPIRUN = "$prep_runjob $MPIDIR/bin/mpirun"
if ($job_scheduler == lls) set MPIRUN = "$prep_runjob runjob"

if ($sva_compiler == Intel || $sva_compiler == Gnu) then
setenv CC    $MPIDIR/bin/mpicc
setenv CXX   $MPIDIR/bin/mpic++
setenv F77   $MPIDIR/bin/mpif77
setenv F90   $MPIDIR/bin/mpif90
setenv FC    $MPIDIR/bin/mpif90

set ARCHDIR       = $SVAROOT/oasis3/$sva_compiler
set LIBBUILD      = ${ARCHDIR}/build/lib
set CHAN          = MPI1
#
setenv PSMILE_INCDIR "-I${LIBBUILD}/psmile.${CHAN} -I${LIBBUILD}/clim.${CHAN} -I${LIBBUILD}/mpp_io"
setenv CPPDEF1       "-Duse_libMPI -Duse_netCDF -Duse_comm_${CHAN} -DVERBOSE -DDEBUG -DTREAT_OVERLAY"
setenv LIBOASIS     "${ARCHDIR}/lib/oasis3/liboasis3.${CHAN}.a"
setenv LIBPSMILE    "${ARCHDIR}/lib/libanaisg.a ${ARCHDIR}/lib/libanaism.a ${ARCHDIR}/lib/libclim.${CHAN}.a ${ARCHDIR}/lib/libpsmile.${CHAN}.a ${ARCHDIR}/lib/libfscint.a  ${ARCHDIR}/lib/libmpp_io.a ${ARCHDIR}/lib/libscrip.a ${ARCHDIR}/lib/libdownscal.a"

# Enviroment Specific to Component Models
# COSMO4.21
setenv CPPDEF2  " "
if ($compile_oas == 1 && $compile_cos == 1) then
 setenv CPPDEF2  "-DCOUP_OAS_COS"
endif
setenv NETCDF_LIB   "-L${NETCDF}/lib -lnetcdf -lnetcdff"
# CLM 3.5
setenv USER_FC "$PREP_C mpif90"
setenv USER_CC "$PREP_C mpicc"
setenv INC_NETCDF ${NETCDF}/include
setenv LIB_NETCDF ${NETCDF}/lib
setenv INC_MPI ${MPIDIR}/include
setenv LIB_MPI ${MPIDIR}/lib
setenv MOD_NETCDF "$INC_NETCDF"     
setenv MPI_LIB_NAME openmpi
setenv LIBNETCDF_FLAG "-lnetcdff"
# setenv F_OPTIMIZATION_OVERRIDE "-O2 -qarch=qp -qtune=qp"
# setenv F_OPTIMIZATION_OVERRIDE "-O3 -qstrict -qarch=qp -qtune=qp"
# setenv F_OPTIMIZATION_OVERRIDE "-O3 -qhot -qarch=qp-qtune=qp"
# ParFlow 3.1
setenv PARFLOW_DIR $SVAROOT/parflow
setenv NETCDF_INC   "-I${NETCDF}/include"
setenv FCFLAGS      "${CPPDEF1} ${PSMILE_INCDIR} ${NETCDF_INC}"
endif # $sva_compiler == Intel || $sva_compiler == Gnu

if ($sva_compiler == Ibm ) then
setenv CC    $MPIDIR/bin/mpixlc_r
setenv CXX   $MPIDIR/bin/mpixlcxx_r
setenv F77   $MPIDIR/bin/mpixlf77_r
setenv F90   $MPIDIR/bin/mpixlf90_r
setenv FC    $MPIDIR/bin/mpixlf90_r

set ARCHDIR       = $SVAROOT/oasis3/$sva_compiler
set LIBBUILD      = ${ARCHDIR}/build/lib
set CHAN          = MPI1
#
setenv PSMILE_INCDIR "-I${LIBBUILD}/psmile.${CHAN} -I${LIBBUILD}/clim.${CHAN} -I${LIBBUILD}/mpp_io"
setenv CPPDEF1       "-WF,-Duse_libMPI -WF,-Duse_netCDF -WF,-Duse_comm_${CHAN} -WF,-DVERBOSE -WF,-DDEBUG -WF,-DTREAT_OVERLAY"
setenv LIBOASIS     "${ARCHDIR}/lib/oasis3/liboasis3.${CHAN}.a"
setenv LIBPSMILE    "${ARCHDIR}/lib/libanaisg.a ${ARCHDIR}/lib/libanaism.a ${ARCHDIR}/lib/libclim.${CHAN}.a ${ARCHDIR}/lib/libpsmile.${CHAN}.a ${ARCHDIR}/lib/libfscint.a  ${ARCHDIR}/lib/libmpp_io.a ${ARCHDIR}/lib/libscrip.a ${ARCHDIR}/lib/libdownscal.a"
 
# Enviroment Specific to Component Models
# COSMO4.21uc
setenv CPPDEF2  " "
if ($compile_oas == 1 && $compile_cos == 1) then
 setenv CPPDEF2  "-WF,-DCOUP_OAS_COS"
endif
setenv NETCDF_LIB   "-L${NETCDF}/lib -lnetcdf"
# CLM 3.5
setenv USER_FC "$PREP_C mpixlf90_r"
setenv USER_CC "$PREP_C mpixlc_r"
setenv INC_NETCDF ${NETCDF}/include
setenv LIB_NETCDF ${NETCDF}/lib
setenv INC_MPI ${MPIDIR}/include
setenv LIB_MPI ${MPIDIR}/lib
setenv MOD_NETCDF "$INC_NETCDF"
setenv MPI_LIB_NAME mpich
setenv LIBNETCDF_FLAG ""
# ParFlow 3.1
setenv PARFLOW_DIR $SVAROOT/parflow
setenv NETCDF_INC   "-I${NETCDF}/include"
setenv FCFLAGS      "-qfree=f90 -qsuffix=cpp=F90 -qnoextname ${CPPDEF1} ${PSMILE_INCDIR} ${NETCDF_INC}"
endif # $sva_compiler == Ibm

#-----------------------------------------------------------------------------
# Step 1c:  Config and Build directory for OASIS3 and component models 
#-----------------------------------------------------------------------------
set blddir_oas    = $SVAROOT/oasis3
set blddir_dum    = $SVAROOT/model2_oas3
set cfgdir_cos    = $SVAROOT/cosmo
set cfgdir_clm    = $SVAROOT/clm/bld
set cfgdir_pfl    = $PARFLOW_DIR/pfsimulator
#
set blddir_clm    = $SVAROOT/tempbld_clm3.5
#
#-----------------------------------------------------------------------------
# Step 2a:  Compile oasis3 libraries
#-----------------------------------------------------------------------------
#if ($compile_oas == 1 || $compile_cos == 1) then     #FGa  always compile oasis
echo "*****************************************************"
echo "* Compiling OASIS3 libraries                        *"
echo "*****************************************************"
echo "cd $blddir_oas"
cd $blddir_oas/util/make_dir
setenv SKIN_MODE none
if ($compile_clean == 1) then
 make -f TopMakefileOasis3 realclean 
endif
make -f TopMakefileOasis3 oasis3_psmile
setenv SKIN_MODE mpi 
#endif
#
if ($compile_oas == 1) then
 cp $blddir_oas/$sva_compiler/bin/*.x $rundir
endif
#
#-----------------------------------------------------------------------------
# Step 2b:  Compile cosmo4.21 with oasis3 libraries 
#-----------------------------------------------------------------------------
if ($compile_cos == 1) then
echo "*****************************************************"
echo "* Compiling COSMO 4.21                              *"
echo "*****************************************************"
echo "cd $cfgdir_cos"
cd $cfgdir_cos
if ($compile_clean == 1) then
 make -f Makefile clean
endif
make -f Makefile 
# echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
# echo $rundir
# echo $forcingdir
# pwd
# ls -l
# echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
cp lmparbin_pur $rundir/.
cp lmstarter $rundir/.
cp lmrun_uc $rundir/.
cd $rundir
# ls -l
# echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
# Edit namelist 
sed "s/dt_cos_bldsva/$dt_cos/" -i lmrun_uc
sed "s/nprocx_cos_bldsva/$nprocx_cos/" -i lmrun_uc
sed "s/nprocy_cos_bldsva/$nprocy_cos/" -i lmrun_uc
sed "s/ie_tot_bldsva/$ngcosx/" -i lmrun_uc
sed "s/je_tot_bldsva/$ngcosy/" -i lmrun_uc
sed -i -e "s,__forcingdir__,$forcingdir," lmrun_uc # KGo
sed -i -e "s,__rundir__,$rundir," lmrun_uc # KGo
# for the multi-step runs this has to be changed
# however, the stepping script does not know other vars just available within the scope of build_oas3
cp lmrun_uc lmrun_uc.template
set nstop_cos = `echo "($runhours*3600-$cplfreq1)/$dt_cos" | bc`
sed "s/nstop_cos_bldsva/$nstop_cos/" -i lmrun_uc
sed "s/init_y_bldsva/$yyyy/" -i lmrun_uc
sed "s/init_m_bldsva/$mm/" -i lmrun_uc
sed "s/init_d_bldsva/$dd/" -i lmrun_uc
sed "s/init_h_bldsva/$hh/" -i lmrun_uc
#
lmrun_uc cleancluma 
lmrun_uc execluma            #creates and executes cosmo_eu_job
pwd
ls -l
echo "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
endif
#
#-----------------------------------------------------------------------------
# Step 2c:  Compile clm3.5 with oasis3 libraries 
#-----------------------------------------------------------------------------
if ($compile_clm == 1) then

echo "*****************************************************"
echo "* Compiling clm3.5                                  *"
echo "*****************************************************"
if ($compile_clean == 1) then
 rm -rf $blddir_clm
endif

mkdir -p $blddir_clm               || echo "cannot create $blddir_clm" && exit 1

## Configuration settings:
set spmd     = on       # settings are [on   | off       ] (default is off)
set maxpft   = 1        # settings are 4->17               (default is 4)
set rtm      = off      # settings are [on   | off       ] (default is off) 
set cps_catch = off       # settings are [on   | off       ] (default is off)
set usr_src  = $cfgdir_clm/usr.src
set flags = "-maxpft $maxpft -rtm $rtm -cps_catch $cps_catch -usr_src $usr_src"
if ($compile_option == 3) then
 set flags = "-maxpft $maxpft -rtm $rtm -usr_src $usr_src -oas3_cos"
endif
if ($compile_option == 4) then
 set flags = "-maxpft $maxpft -rtm $rtm -usr_src $usr_src -oas3_pfl"
endif
if ($compile_option == 5) then
 set flags = "-maxpft $maxpft -rtm $rtm -usr_src $usr_src -oas3_pfl -oas3_cos"
endif
if ($spmd == on ) set flags = "$flags -spmd"
if ($spmd == off) set flags = "$flags -nospmd"

echo "cd $blddir_clm"
cd $blddir_clm

if ( ! -f $blddir_clm/config_cache.xml ) then
    echo "flags to configure are $flags -fopt $OPT_C"
    $cfgdir_clm/configure $flags -fopt "$OPT_C"  || echo "configure failed" && exit 1
    echo "Building CLM in $blddir_clm ..."
    gmake  >&! MAKE.out      || echo "CLM build failed: see $blddir_clm/MAKE.out" && exit 1
else
    echo "Re-building CLM in $blddir_clm ..."
    rm -f Depends
    gmake  >&! REMAKE.out      || echo "CLM build failed: see $blddir_clm/REMAKE.out" && exit 1
endif
#
# Copy the executable to rundir
cp clm $rundir
#
# Edit and copy the clm namelist to rundir
cp $cfgdir_clm/lnd.stdin $rundir/.
#
cd $rundir
# Edit namelist
@ seconds_clm = ( $hh * 3600 )
sed "s/seconds_clm_bldsva/$seconds_clm/" -i lnd.stdin
sed "s/dt_clm_bldsva/$dt_clm/" -i lnd.stdin
sed -i -e "s,__forcingdir__,$forcingdir," lnd.stdin                       # KGo
sed -i "s/__gridsize__/$clmforcinggridsize/" lnd.stdin                    # FGa

cp lnd.stdin lnd.stdin.template
set yyyymmdd = `echo $yyyy$mm$dd` 
sed "s/yyyymmdd_bldsva/$yyyymmdd/" -i lnd.stdin
set runstep_clm = `echo "$runhours*3600/$dt_clm"  | bc`
sed "s/runstep_clm_bldsva/$runstep_clm/" -i lnd.stdin
#
endif
#-----------------------------------------------------------------------------
# Step 2c.1:  Compile model2 with oasis3 libraries 
#-----------------------------------------------------------------------------
if ($compile_dum == 1) then
echo "*****************************************************"
echo "* Compiling dummy model2                            *"
echo "*****************************************************"
echo "cd $blddir_dum"
cd $blddir_dum
make -f Makefile clean
make -f Makefile
cp model2.x $rundir 

endif
#
#-----------------------------------------------------------------------------
# Step 2d: Compile parflow with oasis3 libraries 
#-----------------------------------------------------------------------------
if ($compile_pfl == 1) then
echo "*****************************************************"
echo "* Compiling ParFlow 3.1                             *"
echo "*****************************************************"
echo "cd $cfgdir_pfl"
cd $cfgdir_pfl
#
setenv SKIN_MODE none  #prevents scalasca from instrumenting configure tests
#
if ($compile_clean == 1) then
 make veryclean
if ($compile_oas == 1) then
 	./configure CC="$PREP_C $CC" --prefix=$PARFLOW_DIR --with-hypre=$HYPRE_DIR --with-silo=$SILO_DIR --with-amps=oas3 --with-oas3 --with-amps-sequential-io --enable-timing --enable-opt="$OPT_C" >> conf.log
endif
if ($compile_oas == 0) then
 	./configure CC="$PREP_C $CC" --prefix=$PARFLOW_DIR --with-hypre=$HYPRE_DIR --with-silo=$SILO_DIR --with-amps=mpi1 --with-amps-sequential-io --enable-timing --enable-opt="$OPT_C" >> conf.log
endif
endif
#
setenv SKIN_MODE mpi
#
make >> make.log
make install
cp ./bin/parflow $rundir
#

# Compile pfset tool
echo "cd $PARFLOW_DIR/pftools"
cd $PARFLOW_DIR/pftools
if ($compile_clean == 1) then
 make veryclean
if ($compile_oas == 1) then
 #./configure --prefix=$PARFLOW_DIR --with-silo=$SILO_DIR --with-amps=oas3 --with-oas3 --with-amps-sequential-io
 ./configure CC='gcc' F77='gfortran' FC='gfortran' --prefix=$PARFLOW_DIR --with-silo=$SILO_DIR --with-tcl=$TCL_DIR --with-amps=oas3 --with-oas3 --with-amps-sequential-io
endif
if ($compile_oas == 0) then
 #./configure --prefix=$PARFLOW_DIR --with-silo=$SILO_DIR --with-amps=mpi1 --with-amps-sequential-io
 ./configure CC='gcc' F77='gfortran' FC='gfortran' --prefix=$PARFLOW_DIR --with-silo=$SILO_DIR --with-tcl=$TCL_DIR --with-amps=mpi1 --with-amps-sequential-io
endif
endif
make
make install
#
#Use the tcl script to create the database(pfidb) for parflow run
echo "cd $PARFLOW_DIR/coup_oasrun"
cd $PARFLOW_DIR/coup_oasrun
cp coup_oas.tcl $rundir/.
cd $rundir
# Edit namelist
sed "s/nprocx_pfl_bldsva/$nprocx_pfl/" -i coup_oas.tcl
sed "s/nprocy_pfl_bldsva/$nprocy_pfl/" -i coup_oas.tcl
sed "s/ngpflx_bldsva/$ngpflx/" -i coup_oas.tcl
sed "s/ngpfly_bldsva/$ngpfly/" -i coup_oas.tcl
sed -i -e "s,__forcingdir__,$rundir," coup_oas.tcl                    # KGo
cp coup_oas.tcl coup_oas.tcl.template 
sed "s/dt_pfl_bldsva/$dt_pfl/" -i coup_oas.tcl 
sed "s/stop_pfl_bldsva/$runhours/" -i coup_oas.tcl
#
tclsh coup_oas.tcl
#
# Copy CLM3.5 grid to the rundir (CONSISTENT GRID between CLM and ParFlow)
cp $clm_data/grid* $rundir/clmgrid.nc
#
endif
#
#
#-------------------------------------------------------------------------------
# Step 3: Configuration file for coupling component model via OASIS3 
#-------------------------------------------------------------------------------
set yyyymmdd = `echo $yyyy$mm$dd`
set runseconds = `echo "$runhours*3600" |bc`
set totalruntime = `echo $runseconds | awk '{printf "%.0f",$1}'`
set nproc_cos = 0 ; set nproc_clm = 0 ; set nproc_pfl = 0 ;
if ($compile_cos == 1) then
@ nproc_cos = ( $nprocx_cos * $nprocy_cos )
endif
if ($compile_pfl == 1) then
@ nproc_pfl = ( $nprocx_pfl * $nprocy_pfl )
endif
if ($compile_clm == 1) then
@ nproc_clm = ( $nprocx_clm * $nprocy_clm )
endif
#
if ($compile_oas == 1) then

echo "*****************************************************"
echo "* Editing the config file for coupling              *"
echo "*****************************************************"
# echo "cd $SVAROOT/bldsva/data_oas3"
cd $SVAROOT/bldsva/data_oas3 && pwd
cp cf_name_table.txt $rundir
#cp cos_grids.nc $rundir
# Now Editing the configure file and making the run
#
if ($compile_option == 3) then
cp namcouple_cos_clm $rundir/namcouple
cd $rundir
# ncpl_exe will be 1 for clm !!!
set ncpl_exe1 = $nproc_cos 
set ncpl_exe2 = 1 
ed namcouple <<EOF
g/nproc_exe1/s/nproc_exe1/$nproc_cos/
g/ncpl_exe1/s/ncpl_exe1/$ncpl_exe1/
g/nproc_exe2/s/nproc_exe2/$nproc_clm/
g/ncpl_exe2/s/ncpl_exe2/$ncpl_exe2/
g/cplfreq1/s/cplfreq1/$cplfreq1/
g/ngcosx/s/ngcosx/$ngcosx/
g/ngcosy/s/ngcosy/$ngcosy/
g/ngclmx/s/ngclmx/$ngclmx/
g/ngclmy/s/ngclmy/$ngclmy/
w
q
EOF
cp namcouple namcouple.template
ed namcouple <<EOF
g/totalruntime/s/totalruntime/$totalruntime/
g/yyyymmdd/s/yyyymmdd/$yyyymmdd/
w
q
EOF
endif    #$compile_option == 3 

if ($compile_option == 4) then
cp namcouple_pfl_clm $rundir/namcouple
cd $rundir
# ncpl_exe will be 1 for clm !!!
set ncpl_exe1 = $nproc_pfl 
set ncpl_exe2 = 1 
ed namcouple <<EOF
g/nproc_exe1/s/nproc_exe1/$nproc_pfl/
g/ncpl_exe1/s/ncpl_exe1/$ncpl_exe1/
g/nproc_exe2/s/nproc_exe2/$nproc_clm/
g/ncpl_exe2/s/ncpl_exe2/$ncpl_exe2/
g/cplfreq2/s/cplfreq2/$cplfreq2/
g/ngclmx/s/ngclmx/$ngclmx/
g/ngclmy/s/ngclmy/$ngclmy/
g/ngpflx/s/ngpflx/$ngpflx/
g/ngpfly/s/ngpfly/$ngpfly/
w
q
EOF
cp namcouple namcouple.template
ed namcouple <<EOF
g/totalruntime/s/totalruntime/$totalruntime/
g/yyyymmdd/s/yyyymmdd/$yyyymmdd/
w
q
EOF

endif    #$compile_option == 4

if ($compile_option == 5) then
cp namcouple_cos_clm_pfl $rundir/namcouple.template
cd $rundir
cp namcouple.template namcouple
# ncpl_exe will be 1 for clm !!!
set ncpl_exe1 = $nproc_cos 
set ncpl_exe2 = $nproc_pfl
set ncpl_exe3 = 1 
ed namcouple <<EOF
g/nproc_exe1/s/nproc_exe1/$nproc_cos/
g/ncpl_exe1/s/ncpl_exe1/$ncpl_exe1/
g/nproc_exe2/s/nproc_exe2/$nproc_pfl/
g/ncpl_exe2/s/ncpl_exe2/$ncpl_exe2/
g/nproc_exe3/s/nproc_exe3/$nproc_clm/
g/ncpl_exe3/s/ncpl_exe3/$ncpl_exe3/
g/cplfreq1/s/cplfreq1/$cplfreq1/
g/cplfreq2/s/cplfreq2/$cplfreq2/
g/ngcosx/s/ngcosx/$ngcosx/
g/ngcosy/s/ngcosy/$ngcosy/
g/ngclmx/s/ngclmx/$ngclmx/
g/ngclmy/s/ngclmy/$ngclmy/
g/ngpflx/s/ngpflx/$ngpflx/
g/ngpfly/s/ngpfly/$ngpfly/
w
q
EOF
cp namcouple namcouple.template
ed namcouple <<EOF
g/totalruntime/s/totalruntime/$totalruntime/
g/yyyymmdd/s/yyyymmdd/$yyyymmdd/
w
q
EOF
endif    #$compile_option == 5 

endif
#-----------------------------------------------------------------------------
# Step 4: Generate PBS script for MPMPD jobs in cluma 
#-----------------------------------------------------------------------------
if ($job_scheduler == pbs) then
echo "*****************************************************"
echo "* Creating PBS script for MPMD run                  *"
echo "*****************************************************"
#
if ($compile_option == 0) then
set exec_line = "$MPIRUN $flags_runjob --prefix $MPIDIR -np $nproc_cos ./lmstarter"
endif
if ($compile_option == 1) then
set exec_line = "$MPIRUN $flags_runjob --prefix $MPIDIR -np $nproc_clm ./clm"
endif
if ($compile_option == 2) then
set exec_line = "$MPIRUN $flags_runjob --prefix $MPIDIR -np $nproc_pfl ./parflow rurlaf"
endif
if ($compile_option == 3) then
set exec_line = "$MPIRUN $flags_runjob --prefix $MPIDIR -np $nproc_oas ./oasis3.MPI1.x : -np $nproc_cos ./lmstarter : -np $nproc_clm ./clm"
endif
if ($compile_option == 4) then
set exec_line = "$MPIRUN $flags_runjob --prefix $MPIDIR -np $nproc_oas ./oasis3.MPI1.x : -np $nproc_pfl ./parflow rurlaf : -np $nproc_clm ./clm"
endif
if ($compile_option == 5) then
set exec_line = "$MPIRUN $flags_runjob --prefix $MPIDIR -np $nproc_oas ./oasis3.MPI1.x : -np $nproc_cos ./lmstarter : -np $nproc_pfl ./parflow rurlaf : -np $nproc_clm ./clm"
endif
#
#PBS Script
cd $rundir
cat << EOF >> $rundir/cluma_pbs_run

#Job Submission to Cluma
#PBS -S /bin/csh
#PBS -N sva_oas3
#PBS -l walltime=700:00:00
#PBS -l nodes=nnodes:ppn=$nppn
#PBS -V
#PBS -k oe
#PBS -j oe
#PBS -u $user

cd $rundir
$exec_line
echo 'Results are found in rundir : '$rundir
EOF
# Specify number of nodes to use
set ncluma_processor = `expr $nproc_cos + $nproc_clm + $nproc_pfl + $nproc_oas`
echo "Total number of processor required : " $ncluma_processor
if ($ncluma_processor == $nppn || $ncluma_processor < $nppn) then
set ncluma_nodes = 1
else if ($ncluma_processor > $nppn ) then
set ncluma_nodes_frac = `expr $ncluma_processor % $nppn`
if ($ncluma_nodes_frac > 0 ) then
set ncluma_nodes = `expr $ncluma_processor / $nppn  + 1`
else 
set ncluma_nodes = `expr $ncluma_processor / $nppn`
endif
endif
echo "Number of nodes assigned in cluma: " $ncluma_nodes
sed "s/nnodes/$ncluma_nodes/" -i cluma_pbs_run
#-----------------------------------------------------------------------------
chmod u+x cluma_pbs_run
#-----------------------------------------------------------------------------
endif #$job_scheduler == pbs
#
if ($job_scheduler == lls) then
#-----------------------------------------------------------------------------
# Step 4: Generate LLS script for MPMPD jobs in juqueen 
#-----------------------------------------------------------------------------
set mpitasks = `expr $nproc_cos + $nproc_clm + $nproc_pfl + $nproc_oas`
# if a mondel is not to be used, set the number of CPUs for this model in the settings to 0 for both directions
set bgs_oas = 0
set bgs_cos = 0
set bgs_clm = 0
set bgs_oas = 0
set bgs_oas = `echo "scale = 2; $nproc_oas / $nppn" | bc | perl -nl -MPOSIX -e 'print ceil($_);'` #KGo
set bgs_cos = `echo "scale = 2; $nproc_cos / $nppn" | bc | perl -nl -MPOSIX -e 'print ceil($_);'` #KGo
set bgs_clm = `echo "scale = 2; $nproc_clm / $nppn" | bc | perl -nl -MPOSIX -e 'print ceil($_);'` #KGo
set bgs_pfl = `echo "scale = 2; $nproc_pfl / $nppn" | bc | perl -nl -MPOSIX -e 'print ceil($_);'` #KGo
set actual_bg_size = `expr $bgs_oas + $bgs_cos + $bgs_clm + $bgs_pfl`                             #KGo
#
echo "nproc per exe (=actual MPI processes): " $nproc_oas $nproc_cos $nproc_pfl $nproc_clm
echo "calcs (# of nodes * -p): " $bgs_oas $bgs_cos $bgs_pfl $bgs_clm "; actual bg_size = " $actual_bg_size

if ($compile_option >= 3) then

set start_oasM = 1
@ end_oasM = $start_oasM + $nproc_oas - 1
set start_oas = 0
@ end_oas = $start_oas + $nproc_oas - 1
#@ start_oasP = $start_oas + 1
#@ end_oasP = $end_oas + 1

@ start_cosM = $bgs_oas * $nppn + 1
@ end_cosM = $start_cosM + $nproc_cos - 1
@ start_cos = $nproc_oas 
@ end_cos = $start_cos + $nproc_cos - 1
#@ start_cosP = $start_cos + 1
#@ end_cosP = $end_cos + 1

@ start_pflM = $bgs_cos * $nppn + $bgs_oas * $nppn + 1
@ end_pflM = $start_pflM + $nproc_pfl - 1
@ start_pfl = $nproc_cos + $nproc_oas
@ end_pfl = $start_pfl + $nproc_pfl - 1
#@ start_pflP = $start_pfl + 1
#@ end_pflP = $end_pfl + 1

@ start_clmM = $bgs_cos * $nppn + $bgs_oas * $nppn + $bgs_pfl * $nppn + 1
@ end_clmM = $start_clmM + $nproc_clm - 1
@ start_clm = $nproc_cos + $nproc_oas + $nproc_pfl
@ end_clm = $start_clm + $nproc_clm - 1
#@ start_clmP = $start_clm + 1
#@ end_clmP = $end_clm + 1

# attention; if a certain model is not used, the ranges for that model do not 
# make sense; albeit this does not mean that there is a malfunctioning of the 
# tool as all other ranges are correct and the extractions and ranges in the
# mapfile are fine
echo "ranges ti extract: " $start_oasM $end_oasM   $start_cosM $end_cosM   $start_pflM $end_pflM   $start_clmM $end_clmM
echo "ranges in mapfile: " $start_oas $end_oas   $start_cos $end_cos   $start_pfl $end_pfl   $start_clm $end_clm

endif

echo "*****************************************************"
echo "* Creating LLS script for MPMD run                  *"
echo "*****************************************************"
# -p max. rank (# mpi task/node)  used for any component, -n total no. of mpitasks/processor
if ($compile_option == 0) then
	set exec_line = "$MPIRUN -p $nppn -n $mpitasks $flags_runjob : ./lmparbin_pur"
endif
if ($compile_option == 1) then
	set exec_line = "$MPIRUN -p $nppn -n $mpitasks $flags_runjob : ./clm"
endif
if ($compile_option == 2) then
	set exec_line = "$MPIRUN -p $nppn -n $mpitasks $flags_runjob : ./parflow rurlaf"
endif
if ($compile_option >= 3) then
	#python $HOME/tools/prepro_model_MPMD/python_version_YSLu/mapfile_generator.v1kg.py -f $rundir/mapfile.txt -r $nppn -e oasis3.MPI1.x $nproc_oas -e lmparbin_pur $nproc_cos -e clm $nproc_clm #KGo
	set exec_line = "$MPIRUN -p $nppn -n $mpitasks --mapping mapfile.txt $flags_runjob : ./oasis3.MPI1.x "
endif
#if ($compile_option == 4) then
#python $HOME/tools/prepro_model_MPMD/python_version_YSLu/mapfile_generator.v1kg.py -f $rundir/mapfile.txt -r $nppn -e oasis3.MPI1.x $nproc_oas -e 'parflow rurlaf' $nproc_pfl -e clm $nproc_clm #KGo
#set exec_line = "$MPIRUN -p $nppn -n $mpitasks --mapping mapfile.txt : ./oasis3.MPI1.x "
#endif
#if ($compile_option == 5) then
#python $HOME/tools/prepro_model_MPMD/python_version_YSLu/mapfile_generator.v1kg.py -f $rundir/mapfile.txt -r $nppn -e oasis3.MPI1.x $nproc_oas -e lmparbin_pur $nproc_cos -e 'parflow rurlaf' $nproc_pfl -e clm $nproc_clm #KGo
#python $HOME/tools/prepro_model_MPMD/python_version_YSLu/mapfile_generator.v1kg_.py -f $rundir/mapfile.txt -r $nppn -e oasis3.MPI1.x $nproc_oas -e lmparbin_pur $nproc_cos -e 'parflow rurlaf' $nproc_pfl -e clm $nproc_clm #KGo special version, creates only the header part of the mapfile, to be used with the personality tool below, with the new shell-based scheme this becomes superfluous
#set exec_line = "$MPIRUN -p $nppn -n $mpitasks --mapping mapfile.txt : ./oasis3.MPI1.x "
#endif

set nrw = 1
if ($nrw == 1) then
if ( $compile_option == 2 || $compile_option >= 4 ) then
	echo "preprocessing of ParFlow static fields (distribution)"
	cd $forcingdir/ParFlow/Rur_NRW/slopes
	pwd
	cp -f ascii2pfb.tcl.template_new $rundir/ascii2pfb.tcl
	cp -f *slope.pfb* $rundir/.
	cd $rundir
	pwd
	chmod u+w *slope*  ascii2pfb.tcl
	sed -i -e "s,__svaroot__,$SVAROOT," ascii2pfb.tcl
	sed -i -e "s,__nprocx_pfl__,$nprocx_pfl," ascii2pfb.tcl
	sed -i -e "s,__nprocy_pfl__,$nprocy_pfl," ascii2pfb.tcl
	tclsh ./ascii2pfb.tcl
	cd $forcingdir/ParFlow/Rur_NRW/soilInd
	pwd
	cp -f ascii2pfb.tcl.template_new $rundir/ascii2pfb.tcl
	cp -f *Soil* $rundir/.
	cd $rundir
	pwd
	chmod u+w *Soil* ascii2pfb.tcl
	sed -i -e "s,__svaroot__,$SVAROOT," ascii2pfb.tcl
	sed -i -e "s,__nprocx_pfl__,$nprocx_pfl," ascii2pfb.tcl
	sed -i -e "s,__nprocy_pfl__,$nprocy_pfl," ascii2pfb.tcl
	tclsh ./ascii2pfb.tcl
endif
endif

cd $rundir

# copy the a=priori generated weighing fields needed for the OASIS coupling
# once the grid definition (dimension and/or resolution) these fields have 
# to be regenerated
if ($compile_option >= 3) then
	cp $forcingdir/oasis3/* $rundir/.

# define individual parts of the mapfile header and concatenate depending on the
# executable 
cat << EOF >> $rundir/mh0 
#mpmdbegin $start_oas
#mpmdcmd oasis3.MPI1.x
#mpmdend

EOF
cat << EOF >> $rundir/mh1 
#mpmdbegin $start_cos-$end_cos
#mpmdcmd lmparbin_pur
#mpmdend

EOF
cat << EOF >> $rundir/mh2 
#mpmdbegin $start_pfl-$end_pfl
#mpmdcmd parflow rurlaf
#mpmdend

EOF
cat << EOF >> $rundir/mh3 
#mpmdbegin $start_clm-$end_clm
#mpmdcmd clm
#mpmdend

EOF

endif

if ($compile_option == 3) then
	cat mh0 mh1 mh3 > mapfile.txt
endif
if ($compile_option == 4) then
	cat mh0 mh2 mh3 > mapfile.txt
endif
if ($compile_option == 5) then
	cat mh0 mh1 mh2 mh3 > mapfile.txt
endif

set errorname='$(job_name).$(jobid).err'
set outputname='$(job_name).$(jobid).out'

# create output dir
set tS = ${yyyy}${mm}${dd}${hh}0000
set tS_date_format = "${yyyy}-${mm}-${dd} ${hh}:00:00 ${runhours} hours"
set tE = `date -d "$tS_date_format" +%Y%m%d%H%M%S` # does not work
set DIRstorage_i = ${storagedir}/${tS}-${tE}
mkdir -p $DIRstorage_i 

cat << EOF >> $rundir/juqueen_lls_run.lls
#!/bin/ksh

#@ job_name= TerrSysMP_run
#@ error=$rundir/$errorname
#@ output=$rundir/$outputname
#@ environment = COPY_ALL
#@ notification = always
#@ notify_user = k.goergen@fz-juelich.de
#@ wall_clock_limit = $wallclock_time
#@ bg_size = $actual_bg_size
#@ job_type = bluegene
#@ bg_connectivity = TORUS
#@ queue

cd $rundir

sed -i -r '/^[ ]/d' mapfile.txt
rm -rf epik_clm_16p512_sum/ m0 m1 m2 m3 partinfos.txt base YU*

EOF
if ($compile_option >= 3) then

cat << EOF >> $rundir/juqueen_lls_run.lls
runjob -p $nppn --verbose 4 : /bgsys/local/samples/personality/personality.elf > partinfos.txt
grep -i "task" partinfos.txt | sort | cut -d " " -f 17 | sed 's/,/ /g' | sed 's/(/ /;s/)//' > base 

EOF
# need plus 1, sed works from 1 onwards

if ( $compile_option == 3 ) then 
cat << EOF >> $rundir/juqueen_lls_run.lls
sed -n "$start_oasM,${end_oasM}p" base > m0
sed -n "$start_cosM,${end_cosM}p" base > m1
sed -n "$start_clmM,${end_clmM}p" base > m3
cat m0 m1 m3 >> mapfile.txt
EOF
endif

if ( $compile_option == 4 ) then 
cat << EOF >> $rundir/juqueen_lls_run.lls
sed -n "$start_oasM,${end_oasM}p" base > m0
sed -n "$start_pflM,${end_pflM}p" base > m2
sed -n "$start_clmM,${end_clmM}p" base > m3
cat m0 m2 m3 >> mapfile.txt
EOF
endif

if ( $compile_option == 5 ) then 
cat << EOF >> $rundir/juqueen_lls_run.lls
sed -n "$start_oasM,${end_oasM}p" base > m0
sed -n "$start_cosM,${end_cosM}p" base > m1
sed -n "$start_pflM,${end_pflM}p" base > m2
sed -n "$start_clmM,${end_clmM}p" base > m3
cat m0 m1 m2 m3 >> mapfile.txt
EOF
endif

endif # >=3

cat << EOF >> $rundir/juqueen_lls_run.lls
date
$exec_line
date
print 'results are under: ${rundir}'

# store the data, this might be in a dependent serial chain job script, clean up, also store settings
# all model results in one go, no distinction right now
#cp anaisout clmoas.clm2.h0.*.nc cosmo_out/* masks.nc mweights nweights oas*.prt* Oasis.prt rurlaf.out* TerrSysMP_run* timing_all YU* ${DIRstorage_i}/.
#cp build_oas3 TSMP_LLmultiStepJob.ksh cosmo_eu_job namcouple lnd.stdin coup_oas.tcl partinfos.txt ${DIRstorage_i}/.

exit 0
EOF

echo "Number of mpitasks for juqueen mpmpd : " $mpitasks
#-----------------------------------------------------------------------------
chmod u+x juqueen_lls_run.lls
#-----------------------------------------------------------------------------

endif #$job_scheduler == lls 

cp $SVAROOT/bldsva/build_oas3 . #$rundir/.
#cp $SVAROOT/bldsva/TSMP_LLmultiStepJob.ksh . #$rundir/.

exit 0
